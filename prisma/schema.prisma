// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  password           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isAdmin            Boolean              @default(false)
  referralCode       String               @unique
  walletBalance      Float                @default(0)
  referredById       String?
  referredBy         User?                @relation("UserReferrals", fields: [referredById], references: [id])
  referrals          User[]               @relation("UserReferrals")
  enquiries          Enquiry[]
  loanApplications   LoanApplication[]
  paymentTransaction PaymentTransaction[]
  notifications      Notification[]
  redemptionRequests RedemptionRequest[]
}

model Enquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("Pending") // Pending, In Progress, Closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model LoanApplication {
  id               String   @id @default(cuid())
  fullName         String
  email            String
  phone            String
  pan              String
  businessName     String
  businessType     String
  yearsInBusiness  Int
  annualTurnover   Float
  loanAmount       Float
  loanPurpose      String
  status           String   @default("Pending") // Pending, Approved, Rejected
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  userId           String
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  serviceName       String
  amount            Float
  status            String // Success, Failed
  razorpayOrderId   String?
  razorpayPaymentId String
  razorpaySignature String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model RedemptionRequest {
  id        String   @id @default(cuid())
  amount    Float
  method    String // e.g., 'UPI', 'AccountNumber'
  details   String
  status    String   @default("Pending") // Pending, Completed, Failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
