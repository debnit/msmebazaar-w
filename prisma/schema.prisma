// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @default(cuid())
  name                String
  email               String  @unique
  password            String
  isAdmin             Boolean @default(false)
  isAgent             Boolean @default(false)
  isPro               Boolean @default(false)
  profilePictureUrl   String?
  referralCode        String  @unique
  walletBalance       Float   @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  enquiries           Enquiry[]
  loanApplications    LoanApplication[]
  paymentTransactions PaymentTransaction[]
  notifications       Notification[]
  proMemberProfile    ProMemberProfile?
  valuationRequests   ValuationRequest[]
  navArambhRequests   NavArambhRequest[]
  plantAndMachineryRequests PlantAndMachineryRequest[]
  redemptionRequests  RedemptionRequest[]

  referredBy   User?   @relation("UserReferrals", fields: [referredById], references: [id])
  referredById String?
  referrals    User[]  @relation("UserReferrals")
}

model Enquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("Pending") // Pending, In Progress, Closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model LoanApplication {
  id              String   @id @default(cuid())
  fullName        String
  email           String
  phone           String
  pan             String
  businessName    String
  businessType    String
  yearsInBusiness Int
  annualTurnover  Float
  loanAmount      Float
  loanPurpose     String
  status          String   @default("Pending") // Pending, Approved, Rejected
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  serviceName       String
  amount            Float
  status            String // Success, Failed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  razorpayOrderId   String?
  razorpayPaymentId String?  @unique
  razorpaySignature String?
  user              User     @relation(fields: [userId], references: [id])
  userId            String

  valuationRequest   ValuationRequest?
  navArambhRequest   NavArambhRequest?
  plantAndMachineryRequest PlantAndMachineryRequest?
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model ProMemberProfile {
    id                  String   @id @default(cuid())
    user                User     @relation(fields: [userId], references: [id])
    userId              String   @unique
    businessName        String
    businessNature      String
    helpNeeded          String
    consultationNotes   String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model ValuationRequest {
    id                  String   @id @default(cuid())
    user                User     @relation(fields: [userId], references: [id])
    userId              String
    paymentTransaction  PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    paymentTransactionId String? @unique
    turnover            Float
    assets              String
    liabilities         String
    phone               String
    balanceSheetUrl     String?
    gstReturnsUrl       String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model NavArambhRequest {
    id                  String   @id @default(cuid())
    user                User     @relation(fields: [userId], references: [id])
    userId              String
    paymentTransaction  PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    paymentTransactionId String? @unique
    assetDetails        String
    turnoverDetails     String
    loanDetails         String
    problemDetails      String
    contactDetails      String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model PlantAndMachineryRequest {
    id                  String   @id @default(cuid())
    user                User     @relation(fields: [userId], references: [id])
    userId              String
    paymentTransaction  PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    paymentTransactionId String? @unique
    requestType         String
    machineryDetails    String
    name                String
    phone               String
    details             String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}


model RedemptionRequest {
    id          String   @id @default(cuid())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    amount      Float
    method      String
    details     String
    status      String   @default("Pending") // Pending, Completed, Failed
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
