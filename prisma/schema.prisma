// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(cuid())
  name               String
  email              String                @unique
  password           String
  isAdmin            Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  referralCode       String                @unique
  walletBalance      Float                 @default(0)
  referredById       String?
  referredBy         User?                 @relation("UserReferrals", fields: [referredById], references: [id])
  referrals          User[]                @relation("UserReferrals")
  enquiries          Enquiry[]
  loanApplications   LoanApplication[]
  paymentTransactions PaymentTransaction[]
  notifications      Notification[]
  redemptionRequests RedemptionRequest[]
  proMemberProfiles  ProMemberProfile[]
  valuationRequests  ValuationRequest[]
  navArambhRequests  NavArambhRequest[]
  plantAndMachineryRequests PlantAndMachineryRequest[]
}

model Enquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("Pending") // Pending, In Progress, Closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model LoanApplication {
  id              String   @id @default(cuid())
  fullName        String
  email           String
  phone           String
  pan             String
  businessName    String
  businessType    String
  yearsInBusiness Int
  annualTurnover  Float
  loanAmount      Float
  loanPurpose     String
  status          String   @default("Pending") // Pending, Approved, Rejected
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  serviceName        String
  amount             Float
  status             String // e.g., Success, Failed
  razorpayOrderId    String?
  razorpayPaymentId  String?
  razorpaySignature  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  valuationRequest   ValuationRequest?
  navArambhRequest   NavArambhRequest?
  plantAndMachineryRequest PlantAndMachineryRequest?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model RedemptionRequest {
    id          String      @id @default(cuid())
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    amount      Float
    method      String // UPI, Bank Account, Mobile
    details     String // UPI ID, Account Number, Phone Number
    status      String      @default("Pending") // Pending, Completed, Failed
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model ProMemberProfile {
    id                 String   @id @default(cuid())
    userId             String   @unique
    user               User     @relation(fields: [userId], references: [id])
    businessName       String
    businessNature     String
    helpNeeded         String
    consultationNotes  String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}

model ValuationRequest {
    id                   String      @id @default(cuid())
    userId               String
    user                 User        @relation(fields: [userId], references: [id])
    paymentTransactionId String?     @unique
    paymentTransaction   PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    turnover             Float
    assets               String
    liabilities          String
    phone                String
    balanceSheetUrl      String?
    gstReturnsUrl        String?
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
}

model NavArambhRequest {
    id                   String      @id @default(cuid())
    userId               String
    user                 User        @relation(fields: [userId], references: [id])
    paymentTransactionId String?     @unique
    paymentTransaction   PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    assetDetails         String
    turnoverDetails      String
    loanDetails          String
    problemDetails       String
    contactDetails       String
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
}

model PlantAndMachineryRequest {
    id                   String      @id @default(cuid())
    userId               String
    user                 User        @relation(fields: [userId], references: [id])
    paymentTransactionId String?     @unique
    paymentTransaction   PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
    requestType          String // Buy, Sell, Lease
    machineryDetails     String
    name                 String
    phone                String
    details              String
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
}
