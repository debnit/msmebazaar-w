// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  password           String
  isAdmin            Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  referralCode       String               @unique
  referredById       String?
  referredBy         User?                @relation("UserReferrals", fields: [referredById], references: [id])
  referrals          User[]               @relation("UserReferrals")
  walletBalance      Float                @default(0)
  enquiries          Enquiry[]
  loanApplications   LoanApplication[]
  paymentTransactions PaymentTransaction[]
  notifications      Notification[]
  redemptionRequests RedemptionRequest[]
  proMemberProfile   ProMemberProfile?
}

model Enquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("Pending") // Pending, In Progress, Closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model LoanApplication {
  id              String   @id @default(cuid())
  fullName        String
  email           String
  phone           String
  pan             String
  businessName    String
  businessType    String
  yearsInBusiness Int
  annualTurnover  Float
  loanAmount      Float
  loanPurpose     String
  status          String   @default("Pending") // Pending, Approved, Rejected
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  serviceName       String
  amount            Float
  status            String // Success, Failed
  razorpayOrderId   String?
  razorpayPaymentId String
  razorpaySignature String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model RedemptionRequest {
  id        String   @id @default(cuid())
  amount    Float
  method    String // e.g., UPI, Bank Account
  details   String // e.g., UPI ID, Account Number
  status    String   @default("Pending") // Pending, Completed, Failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ProMemberProfile {
  id                String   @id @default(cuid())
  businessName      String
  businessNature    String
  helpNeeded        String
  consultationNotes String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
}
