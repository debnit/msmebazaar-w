// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  isAdmin             Boolean               @default(false)
  isAgent             Boolean               @default(false)
  isPro               Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  referralCode        String                @unique
  referredById        String?
  walletBalance       Float                 @default(0)
  referredBy          User?                 @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals           User[]                @relation("UserReferrals")
  enquiries           Enquiry[]
  loanApplications    LoanApplication[]
  paymentTransactions PaymentTransaction[]
  notifications       Notification[]
  proMemberProfile    ProMemberProfile?
  valuationRequests   ValuationRequest[]
  navArambhRequests    NavArambhRequest[]
  plantAndMachineryRequests PlantAndMachineryRequest[]
  redemptionRequests  RedemptionRequest[]
}

model Enquiry {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("Pending") // Pending, In Progress, Closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model LoanApplication {
  id             String   @id @default(cuid())
  userId         String
  fullName       String
  email          String
  phone          String
  pan            String
  businessName   String
  businessType   String
  yearsInBusiness Int
  annualTurnover Float
  loanAmount     Float
  loanPurpose    String
  status         String   @default("Pending") // Pending, Approved, Rejected
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id                  String   @id @default(cuid())
  userId              String
  serviceName         String
  amount              Float
  status              String
  razorpayOrderId     String?
  razorpayPaymentId   String?
  razorpaySignature   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
  ValuationRequest    ValuationRequest?
  NavArambhRequest    NavArambhRequest?
  PlantAndMachineryRequest PlantAndMachineryRequest?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ProMemberProfile {
    id                  String   @id @default(cuid())
    userId              String   @unique
    businessName        String
    businessNature      String
    helpNeeded          String
    consultationNotes   String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    user                User     @relation(fields: [userId], references: [id])
}

model ValuationRequest {
    id                  String   @id @default(cuid())
    userId              String
    paymentTransactionId String  @unique
    turnover            Float
    assets              String
    liabilities         String
    phone               String
    balanceSheetUrl     String?
    gstReturnsUrl       String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    user                User     @relation(fields: [userId], references: [id])
    paymentTransaction  PaymentTransaction @relation(fields: [paymentTransactionId], references: [id])
}

model NavArambhRequest {
    id                  String   @id @default(cuid())
    userId              String
    paymentTransactionId String? @unique
    assetDetails        String
    turnoverDetails     String
    loanDetails         String
    problemDetails      String
    contactDetails      String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    user                User     @relation(fields: [userId], references: [id])
    paymentTransaction  PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
}

model PlantAndMachineryRequest {
    id                  String   @id @default(cuid())
    userId              String
    paymentTransactionId String? @unique
    requestType         String // buy, sell, lease
    machineryDetails    String
    name                String
    phone               String
    details             String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    user                User     @relation(fields: [userId], references: [id])
    paymentTransaction  PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
}

model RedemptionRequest {
    id          String   @id @default(cuid())
    userId      String
    amount      Float
    method      String
    details     String
    status      String   @default("Pending") // Pending, Completed, Failed
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
}
